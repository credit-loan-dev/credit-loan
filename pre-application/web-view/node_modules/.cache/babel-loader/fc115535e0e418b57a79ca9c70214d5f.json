{"remainingRequest":"D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\node_modules\\babel-loader\\lib\\index.js!D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\src\\libs\\axios.js","dependencies":[{"path":"D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\src\\libs\\axios.js","mtime":1535506636101},{"path":"D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\.babelrc","mtime":1535506636092},{"path":"D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535516444031},{"path":"D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _classCallCheck from \"D:\\\\liusong\\\\git_place\\\\credit-loan\\\\pre-application\\\\web-view\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/classCallCheck\";\nimport _createClass from \"D:\\\\liusong\\\\git_place\\\\credit-loan\\\\pre-application\\\\web-view\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/createClass\";\nimport Axios from 'axios';\nimport baseURL from '_conf/url';\nimport { Message } from 'iview';\nimport Cookies from 'js-cookie';\nimport { TOKEN_KEY } from '@/libs/util';\n\nvar httpRequest =\n/*#__PURE__*/\nfunction () {\n  function httpRequest() {\n    _classCallCheck(this, httpRequest);\n\n    this.options = {\n      method: '',\n      url: '' // 存储请求队列\n\n    };\n    this.queue = {};\n  } // 销毁请求实例\n\n\n  _createClass(httpRequest, [{\n    key: \"destroy\",\n    value: function destroy(url) {\n      delete this.queue[url];\n      var queue = Object.keys(this.queue);\n      return queue.length;\n    } // 请求拦截\n\n  }, {\n    key: \"interceptors\",\n    value: function interceptors(instance, url) {\n      var _this = this;\n\n      // 添加请求拦截器\n      instance.interceptors.request.use(function (config) {\n        if (!config.url.includes('/users')) {\n          config.headers['x-access-token'] = Cookies.get(TOKEN_KEY);\n        } // Spin.show()\n        // 在发送请求之前做些什么\n\n\n        return config;\n      }, function (error) {\n        // 对请求错误做些什么\n        return Promise.reject(error);\n      }); // 添加响应拦截器\n\n      instance.interceptors.response.use(function (res) {\n        var data = res.data;\n\n        var is = _this.destroy(url);\n\n        if (!is) {\n          setTimeout(function () {// Spin.hide()\n          }, 500);\n        }\n\n        if (data.code !== 200) {\n          // 后端服务在个别情况下回报201，待确认\n          if (data.code === 401) {\n            Cookies.remove(TOKEN_KEY);\n            window.location.href = window.location.pathname + '#/login';\n            Message.error('未登录，或登录失效，请登录');\n          } else {\n            if (data.msg) Message.error(data.msg);\n          }\n\n          return false;\n        }\n\n        return data;\n      }, function (error) {\n        Message.error('服务内部错误'); // 对响应错误做点什么\n\n        return Promise.reject(error);\n      });\n    } // 创建实例\n\n  }, {\n    key: \"create\",\n    value: function create() {\n      var conf = {\n        baseURL: baseURL,\n        // timeout: 2000,\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8',\n          'X-URL-PATH': location.pathname\n        }\n      };\n      return Axios.create(conf);\n    } // 合并请求实例\n\n  }, {\n    key: \"mergeReqest\",\n    value: function mergeReqest() {\n      var instances = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    } //\n    // 请求实例\n\n  }, {\n    key: \"request\",\n    value: function request(options) {\n      var instance = this.create();\n      this.interceptors(instance, options.url);\n      options = Object.assign({}, options);\n      this.queue[options.url] = instance;\n      return instance(options);\n    }\n  }]);\n\n  return httpRequest;\n}();\n\nexport default httpRequest;",{"version":3,"sources":["src\\libs\\axios.js"],"names":["Axios","baseURL","Message","Cookies","TOKEN_KEY","httpRequest","options","method","url","queue","Object","keys","length","instance","interceptors","request","use","config","includes","headers","get","Promise","reject","error","response","res","data","is","destroy","setTimeout","code","remove","window","location","href","pathname","msg","conf","create","instances","assign"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,SAAT,QAA0B,aAA1B;;IACMC,W;;;AACJ,yBAAe;AAAA;;AACb,SAAKC,OAAL,GAAe;AACbC,cAAQ,EADK;AAEbC,WAAK,EAFQ,CAIf;;AAJe,KAAf;AAKA,SAAKC,KAAL,GAAa,EAAb;AACD,G,CACD;;;;;4BACSD,G,EAAK;AACZ,aAAO,KAAKC,KAAL,CAAWD,GAAX,CAAP;AACA,UAAMC,QAAQC,OAAOC,IAAP,CAAY,KAAKF,KAAjB,CAAd;AACA,aAAOA,MAAMG,MAAb;AACD,K,CACD;;;;iCACcC,Q,EAAUL,G,EAAK;AAAA;;AAC3B;AACAK,eAASC,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,kBAAU;AAC1C,YAAI,CAACC,OAAOT,GAAP,CAAWU,QAAX,CAAoB,QAApB,CAAL,EAAoC;AAClCD,iBAAOE,OAAP,CAAe,gBAAf,IAAmChB,QAAQiB,GAAR,CAAYhB,SAAZ,CAAnC;AACD,SAHyC,CAI1C;AACA;;;AACA,eAAOa,MAAP;AACD,OAPD,EAOG,iBAAS;AACV;AACA,eAAOI,QAAQC,MAAR,CAAeC,KAAf,CAAP;AACD,OAVD,EAF2B,CAc3B;;AACAV,eAASC,YAAT,CAAsBU,QAAtB,CAA+BR,GAA/B,CAAmC,UAACS,GAAD,EAAS;AAAA,YACpCC,IADoC,GAC3BD,GAD2B,CACpCC,IADoC;;AAE1C,YAAMC,KAAK,MAAKC,OAAL,CAAapB,GAAb,CAAX;;AACA,YAAI,CAACmB,EAAL,EAAS;AACPE,qBAAW,YAAM,CACf;AACD,WAFD,EAEG,GAFH;AAGD;;AACD,YAAIH,KAAKI,IAAL,KAAc,GAAlB,EAAuB;AACrB;AACA,cAAIJ,KAAKI,IAAL,KAAc,GAAlB,EAAuB;AACrB3B,oBAAQ4B,MAAR,CAAe3B,SAAf;AACA4B,mBAAOC,QAAP,CAAgBC,IAAhB,GAAuBF,OAAOC,QAAP,CAAgBE,QAAhB,GAA2B,SAAlD;AACAjC,oBAAQqB,KAAR,CAAc,eAAd;AACD,WAJD,MAIO;AACL,gBAAIG,KAAKU,GAAT,EAAclC,QAAQqB,KAAR,CAAcG,KAAKU,GAAnB;AACf;;AACD,iBAAO,KAAP;AACD;;AACD,eAAOV,IAAP;AACD,OApBD,EAoBG,UAACH,KAAD,EAAW;AACZrB,gBAAQqB,KAAR,CAAc,QAAd,EADY,CAEZ;;AACA,eAAOF,QAAQC,MAAR,CAAeC,KAAf,CAAP;AACD,OAxBD;AAyBD,K,CACD;;;;6BACU;AACR,UAAIc,OAAO;AACTpC,iBAASA,OADA;AAET;AACAkB,iBAAS;AACP,0BAAgB,iCADT;AAEP,wBAAcc,SAASE;AAFhB;AAHA,OAAX;AAQA,aAAOnC,MAAMsC,MAAN,CAAaD,IAAb,CAAP;AACD,K,CACD;;;;kCAC6B;AAAA,UAAhBE,SAAgB,uEAAJ,EAAI;AAE5B,K,CADC;AAEF;;;;4BACSjC,O,EAAS;AAChB,UAAIO,WAAW,KAAKyB,MAAL,EAAf;AACA,WAAKxB,YAAL,CAAkBD,QAAlB,EAA4BP,QAAQE,GAApC;AACAF,gBAAUI,OAAO8B,MAAP,CAAc,EAAd,EAAkBlC,OAAlB,CAAV;AACA,WAAKG,KAAL,CAAWH,QAAQE,GAAnB,IAA0BK,QAA1B;AACA,aAAOA,SAASP,OAAT,CAAP;AACD;;;;;;AAEH,eAAeD,WAAf","sourceRoot":"D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view","sourcesContent":["import Axios from 'axios'\nimport baseURL from '_conf/url'\nimport { Message } from 'iview'\nimport Cookies from 'js-cookie'\nimport { TOKEN_KEY } from '@/libs/util'\nclass httpRequest {\n  constructor () {\n    this.options = {\n      method: '',\n      url: ''\n    }\n    // 存储请求队列\n    this.queue = {}\n  }\n  // 销毁请求实例\n  destroy (url) {\n    delete this.queue[url]\n    const queue = Object.keys(this.queue)\n    return queue.length\n  }\n  // 请求拦截\n  interceptors (instance, url) {\n    // 添加请求拦截器\n    instance.interceptors.request.use(config => {\n      if (!config.url.includes('/users')) {\n        config.headers['x-access-token'] = Cookies.get(TOKEN_KEY)\n      }\n      // Spin.show()\n      // 在发送请求之前做些什么\n      return config\n    }, error => {\n      // 对请求错误做些什么\n      return Promise.reject(error)\n    })\n\n    // 添加响应拦截器\n    instance.interceptors.response.use((res) => {\n      let { data } = res\n      const is = this.destroy(url)\n      if (!is) {\n        setTimeout(() => {\n          // Spin.hide()\n        }, 500)\n      }\n      if (data.code !== 200) {\n        // 后端服务在个别情况下回报201，待确认\n        if (data.code === 401) {\n          Cookies.remove(TOKEN_KEY)\n          window.location.href = window.location.pathname + '#/login'\n          Message.error('未登录，或登录失效，请登录')\n        } else {\n          if (data.msg) Message.error(data.msg)\n        }\n        return false\n      }\n      return data\n    }, (error) => {\n      Message.error('服务内部错误')\n      // 对响应错误做点什么\n      return Promise.reject(error)\n    })\n  }\n  // 创建实例\n  create () {\n    let conf = {\n      baseURL: baseURL,\n      // timeout: 2000,\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8',\n        'X-URL-PATH': location.pathname\n      }\n    }\n    return Axios.create(conf)\n  }\n  // 合并请求实例\n  mergeReqest (instances = []) {\n    //\n  }\n  // 请求实例\n  request (options) {\n    var instance = this.create()\n    this.interceptors(instance, options.url)\n    options = Object.assign({}, options)\n    this.queue[options.url] = instance\n    return instance(options)\n  }\n}\nexport default httpRequest\n"]}]}