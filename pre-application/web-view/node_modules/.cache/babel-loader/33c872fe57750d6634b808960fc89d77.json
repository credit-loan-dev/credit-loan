{"remainingRequest":"D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\node_modules\\babel-loader\\lib\\index.js!D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\src\\components\\count-to\\count-to.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\src\\components\\count-to\\count-to.vue","mtime":1535506636030},{"path":"D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\.babelrc","mtime":1535506636092},{"path":"D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535516444031},{"path":"D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\nimport CountUp from 'countup';\nimport './index.less';\nexport default {\n  name: 'CountTo',\n  props: {\n    init: {\n      type: Number,\n      default: 0\n    },\n\n    /**\n     * @description 起始值，即动画开始前显示的数值\n     */\n    startVal: {\n      type: Number,\n      default: 0\n    },\n\n    /**\n     * @description 结束值，即动画结束后显示的数值\n     */\n    end: {\n      type: Number,\n      required: true\n    },\n\n    /**\n     * @description 保留几位小数\n     */\n    decimals: {\n      type: Number,\n      default: 0\n    },\n\n    /**\n     * @description 分隔整数和小数的符号，默认是小数点\n     */\n    decimal: {\n      type: String,\n      default: '.'\n    },\n\n    /**\n     * @description 动画持续的时间，单位是秒\n     */\n    duration: {\n      type: Number,\n      default: 2\n    },\n\n    /**\n     * @description 动画延迟开始的时间，单位是秒\n     */\n    delay: {\n      type: Number,\n      default: 0\n    },\n\n    /**\n     * @description 是否禁用easing动画效果\n     */\n    uneasing: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * @description 是否使用分组，分组后每三位会用一个符号分隔\n     */\n    usegroup: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * @description 用于分组(usegroup)的符号\n     */\n    separator: {\n      type: String,\n      default: ','\n    },\n\n    /**\n     * @description 是否简化显示，设为true后会使用unit单位来做相关省略\n     */\n    simplify: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * @description 自定义单位，如[3, 'K+'], [6, 'M+']即大于3位数小于6位数的用k+来做省略\n     *              1000即显示为1K+\n     */\n    unit: {\n      type: Array,\n      default: function _default() {\n        return [[3, 'K+'], [6, 'M+'], [9, 'B+']];\n      }\n    },\n    countClass: {\n      type: String,\n      default: ''\n    },\n    unitClass: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      counter: null,\n      unitText: ''\n    };\n  },\n  computed: {\n    counterId: function counterId() {\n      return \"count_to_\".concat(this._uid);\n    }\n  },\n  methods: {\n    getHandleVal: function getHandleVal(val, len) {\n      return {\n        endVal: parseInt(val / Math.pow(10, this.unit[len - 1][0])),\n        unitText: this.unit[len - 1][1]\n      };\n    },\n    transformValue: function transformValue(val) {\n      var len = this.unit.length;\n      var res = {\n        endVal: 0,\n        unitText: ''\n      };\n      if (val < Math.pow(10, this.unit[0][0])) res.endVal = val;else {\n        for (var i = 1; i < len; i++) {\n          if (val >= Math.pow(10, this.unit[i - 1][0]) && val < Math.pow(10, this.unit[i][0])) res = this.getHandleVal(val, i);\n        }\n      }\n      if (val > Math.pow(10, this.unit[len - 1][0])) res = this.getHandleVal(val, len);\n      return res;\n    },\n    getValue: function getValue(val) {\n      var res = 0;\n\n      if (this.simplify) {\n        var _this$transformValue = this.transformValue(val),\n            endVal = _this$transformValue.endVal,\n            unitText = _this$transformValue.unitText;\n\n        this.unitText = unitText;\n        res = endVal;\n      } else {\n        res = val;\n      }\n\n      return res;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.$nextTick(function () {\n      var endVal = _this.getValue(_this.end);\n\n      _this.counter = new CountUp(_this.counterId, _this.startVal, endVal, _this.decimals, _this.duration, {\n        useEasing: !_this.uneasing,\n        useGrouping: _this.useGroup,\n        separator: _this.separator,\n        decimal: _this.decimal\n      });\n      setTimeout(function () {\n        if (!_this.counter.error) _this.counter.start();\n      }, _this.delay);\n    });\n  },\n  watch: {\n    end: function end(newVal) {\n      var endVal = this.getValue(newVal);\n      this.counter.update(endVal);\n    }\n  }\n};",{"version":3,"sources":["count-to.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"count-to-wrapper\">\n    <slot name=\"left\"/>\n    <p class=\"content-outer\"><span :class=\"['count-to-count-text', countClass]\" :id=\"counterId\">{{ init }}</span><i :class=\"['count-to-unit-text', unitClass]\">{{ unitText }}</i></p>\n    <slot name=\"right\"/>\n  </div>\n</template>\n\n<script>\nimport CountUp from 'countup'\nimport './index.less'\nexport default {\n  name: 'CountTo',\n  props: {\n    init: {\n      type: Number,\n      default: 0\n    },\n    /**\n     * @description 起始值，即动画开始前显示的数值\n     */\n    startVal: {\n      type: Number,\n      default: 0\n    },\n    /**\n     * @description 结束值，即动画结束后显示的数值\n     */\n    end: {\n      type: Number,\n      required: true\n    },\n    /**\n     * @description 保留几位小数\n     */\n    decimals: {\n      type: Number,\n      default: 0\n    },\n    /**\n     * @description 分隔整数和小数的符号，默认是小数点\n     */\n    decimal: {\n      type: String,\n      default: '.'\n    },\n    /**\n     * @description 动画持续的时间，单位是秒\n     */\n    duration: {\n      type: Number,\n      default: 2\n    },\n    /**\n     * @description 动画延迟开始的时间，单位是秒\n     */\n    delay: {\n      type: Number,\n      default: 0\n    },\n    /**\n     * @description 是否禁用easing动画效果\n     */\n    uneasing: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * @description 是否使用分组，分组后每三位会用一个符号分隔\n     */\n    usegroup: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * @description 用于分组(usegroup)的符号\n     */\n    separator: {\n      type: String,\n      default: ','\n    },\n    /**\n     * @description 是否简化显示，设为true后会使用unit单位来做相关省略\n     */\n    simplify: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * @description 自定义单位，如[3, 'K+'], [6, 'M+']即大于3位数小于6位数的用k+来做省略\n     *              1000即显示为1K+\n     */\n    unit: {\n      type: Array,\n      default () {\n        return [[3, 'K+'], [6, 'M+'], [9, 'B+']]\n      }\n    },\n    countClass: {\n      type: String,\n      default: ''\n    },\n    unitClass: {\n      type: String,\n      default: ''\n    }\n  },\n  data () {\n    return {\n      counter: null,\n      unitText: ''\n    }\n  },\n  computed: {\n    counterId () {\n      return `count_to_${this._uid}`\n    }\n  },\n  methods: {\n    getHandleVal (val, len) {\n      return {\n        endVal: parseInt(val / Math.pow(10, this.unit[len - 1][0])),\n        unitText: this.unit[len - 1][1]\n      }\n    },\n    transformValue (val) {\n      let len = this.unit.length\n      let res = {\n        endVal: 0,\n        unitText: ''\n      }\n      if (val < Math.pow(10, this.unit[0][0])) res.endVal = val\n      else {\n        for (let i = 1; i < len; i++) {\n          if (val >= Math.pow(10, this.unit[i - 1][0]) && val < Math.pow(10, this.unit[i][0])) res = this.getHandleVal(val, i)\n        }\n      }\n      if (val > Math.pow(10, this.unit[len - 1][0])) res = this.getHandleVal(val, len)\n      return res\n    },\n    getValue (val) {\n      let res = 0\n      if (this.simplify) {\n        let { endVal, unitText } = this.transformValue(val)\n        this.unitText = unitText\n        res = endVal\n      } else {\n        res = val\n      }\n      return res\n    }\n  },\n  mounted () {\n    this.$nextTick(() => {\n      let endVal = this.getValue(this.end)\n      this.counter = new CountUp(this.counterId, this.startVal, endVal, this.decimals, this.duration, {\n        useEasing: !this.uneasing,\n        useGrouping: this.useGroup,\n        separator: this.separator,\n        decimal: this.decimal\n      })\n      setTimeout(() => {\n        if (!this.counter.error) this.counter.start()\n      }, this.delay)\n    })\n  },\n  watch: {\n    end (newVal) {\n      let endVal = this.getValue(newVal)\n      this.counter.update(endVal)\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src\\components\\count-to"}]}