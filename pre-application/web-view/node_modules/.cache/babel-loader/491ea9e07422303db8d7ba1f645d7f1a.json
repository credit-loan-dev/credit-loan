{"remainingRequest":"D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\node_modules\\babel-loader\\lib\\index.js!D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\src\\mock\\data.js","dependencies":[{"path":"D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\src\\mock\\data.js","mtime":1535506636165},{"path":"D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\.babelrc","mtime":1535506636092},{"path":"D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535516444031},{"path":"D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Mock from 'mockjs';\nimport { doCustomTimes, getParams } from '@/libs/util';\nexport var getTableData = function getTableData(req) {\n  var tableData = [];\n  doCustomTimes(5, function () {\n    tableData.push(Mock.mock({\n      name: '@name',\n      email: '@email',\n      createTime: '@date'\n    }));\n  });\n  return {\n    code: 200,\n    data: tableData,\n    msg: ''\n  };\n};\nexport var getProTableData = function getProTableData(req) {\n  var paramObj = getParams(req.url);\n  console.log(paramObj);\n  var tableData = [];\n  doCustomTimes(paramObj.rowNums, function () {\n    tableData.push(Mock.mock({\n      code: '@string(10,10)',\n      name: '@name',\n      typeId: '@string(10,10)',\n      priority: '@natural(1,10)',\n      creditApplyMaxMonths: '@natural(1,36)',\n      creditApplyFlowModleId: '@string',\n      creditApplyRejectInfluenceDays: '@natural(1,36)',\n      loopQuota: '@boolean',\n      increaseQuota: '@boolean',\n      minCreditQuota: '@natural(10000,50000)',\n      maxCreditQuota: '@natural(100000,500000)',\n      quotaEffectiveMonths: '@natural(10000,50000)',\n      minSingleLoanAmount: '@natural(10000,50000)',\n      maxSingleLoanAmount: '@natural(100000,500000)',\n      singleLoanTermType: '@string',\n      maxSingleLoanTerm: '@natural(24,36)',\n      minSingleLoanTerm: '@natural(1,12)',\n      loanFlowModleId: '@string(6,8)',\n      effective: '@boolean'\n    }));\n  });\n  return {\n    code: 200,\n    data: {\n      list: tableData,\n      total: 100\n    },\n    msg: ''\n  };\n};\nexport var getCustomRepaymentType = function getCustomRepaymentType(req) {\n  var paramObj = getParams(req.url);\n  console.log(paramObj);\n  var tableData = [];\n  doCustomTimes(paramObj.rowNums, function () {\n    tableData.push(Mock.mock({\n      repaymentTypeCode: '@string(10,10)',\n      repaymentTypeName: '@name',\n      componentType: '@string(10,10)',\n      state: '@boolean',\n      componentescribe: '@string(10,10)',\n      registerData: '@date',\n      registerPerson: '@name',\n      registerOrg: '@name',\n      updatePerson: '@name',\n      updateOrg: '@name',\n      updateData: '@date'\n    }));\n  });\n  return {\n    code: 200,\n    data: {\n      list: tableData,\n      total: 20\n    },\n    msg: ''\n  };\n};\nexport var getProductAlterApply = function getProductAlterApply(req) {\n  var paramObj = getParams(req.url);\n  console.log(paramObj);\n  var tableData = [];\n  doCustomTimes(paramObj.rowNums, function () {\n    tableData.push(Mock.mock({\n      productCode: '@string(10,10)',\n      productName: '@name',\n      productType: '@string(10,10)',\n      registerPerson: '@boolean',\n      registerOrg: '@string(10,10)',\n      registerData: '@date'\n    }));\n  });\n  return {\n    code: 200,\n    data: {\n      list: tableData,\n      total: 20\n    },\n    msg: ''\n  };\n};",{"version":3,"sources":["src\\mock\\data.js"],"names":["Mock","doCustomTimes","getParams","getTableData","tableData","push","mock","name","email","createTime","code","data","msg","getProTableData","paramObj","req","url","console","log","rowNums","typeId","priority","creditApplyMaxMonths","creditApplyFlowModleId","creditApplyRejectInfluenceDays","loopQuota","increaseQuota","minCreditQuota","maxCreditQuota","quotaEffectiveMonths","minSingleLoanAmount","maxSingleLoanAmount","singleLoanTermType","maxSingleLoanTerm","minSingleLoanTerm","loanFlowModleId","effective","list","total","getCustomRepaymentType","repaymentTypeCode","repaymentTypeName","componentType","state","componentescribe","registerData","registerPerson","registerOrg","updatePerson","updateOrg","updateData","getProductAlterApply","productCode","productName","productType"],"mappings":"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","sourceRoot":"D:\\liusong\\git_place\\credit-loan\\pre-application\\web-view","sourcesContent":["import Mock from 'mockjs'\nimport { doCustomTimes, getParams } from '@/libs/util'\n\nexport const getTableData = req => {\n  let tableData = []\n  doCustomTimes(5, () => {\n    tableData.push(Mock.mock({\n      name: '@name',\n      email: '@email',\n      createTime: '@date'\n    }))\n  })\n  return {\n    code: 200,\n    data: tableData,\n    msg: ''\n  }\n}\nexport const getProTableData = req => {\n  let paramObj = getParams(req.url)\n  console.log(paramObj)\n  let tableData = []\n  doCustomTimes(paramObj.rowNums, () => {\n    tableData.push(Mock.mock({\n      code: '@string(10,10)',\n      name: '@name',\n      typeId: '@string(10,10)',\n      priority: '@natural(1,10)',\n      creditApplyMaxMonths: '@natural(1,36)',\n      creditApplyFlowModleId: '@string',\n      creditApplyRejectInfluenceDays: '@natural(1,36)',\n      loopQuota: '@boolean',\n      increaseQuota: '@boolean',\n      minCreditQuota: '@natural(10000,50000)',\n      maxCreditQuota: '@natural(100000,500000)',\n      quotaEffectiveMonths: '@natural(10000,50000)',\n      minSingleLoanAmount: '@natural(10000,50000)',\n      maxSingleLoanAmount: '@natural(100000,500000)',\n      singleLoanTermType: '@string',\n      maxSingleLoanTerm: '@natural(24,36)',\n      minSingleLoanTerm: '@natural(1,12)',\n      loanFlowModleId: '@string(6,8)',\n      effective: '@boolean'\n    }))\n  })\n  return {\n    code: 200,\n    data: {\n      list: tableData,\n      total: 100\n    },\n    msg: ''\n  }\n}\nexport const getCustomRepaymentType = req => {\n  let paramObj = getParams(req.url)\n  console.log(paramObj)\n  let tableData = []\n  doCustomTimes(paramObj.rowNums, () => {\n    tableData.push(Mock.mock({\n      repaymentTypeCode: '@string(10,10)',\n      repaymentTypeName: '@name',\n      componentType: '@string(10,10)',\n      state: '@boolean',\n      componentescribe: '@string(10,10)',\n      registerData: '@date',\n      registerPerson: '@name',\n      registerOrg: '@name',\n      updatePerson: '@name',\n      updateOrg: '@name',\n      updateData: '@date'\n    }))\n  })\n  return {\n    code: 200,\n    data: {\n      list: tableData,\n      total: 20\n    },\n    msg: ''\n  }\n}\nexport const getProductAlterApply = req => {\n  let paramObj = getParams(req.url)\n  console.log(paramObj)\n  let tableData = []\n  doCustomTimes(paramObj.rowNums, () => {\n    tableData.push(Mock.mock({\n      productCode: '@string(10,10)',\n      productName: '@name',\n      productType: '@string(10,10)',\n      registerPerson: '@boolean',\n      registerOrg: '@string(10,10)',\n      registerData: '@date'\n    }))\n  })\n  return {\n    code: 200,\n    data: {\n      list: tableData,\n      total: 20\n    },\n    msg: ''\n  }\n}\n"]}]}